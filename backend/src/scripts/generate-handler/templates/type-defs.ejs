import { BaseOutput } from '../../../BaseOutput';

export interface <%= handlerName %>Payload {<% if (payload.properties.length > 0) { payload.properties.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(prop) { %><%= printProperty(prop, 1) %><% }); } %>
}

export interface <%= handlerName %>Output extends BaseOutput {<% if (output.properties.length > 0) { output.properties.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(prop) { %><%= printProperty(prop, 1) %><% }); } %>
}

export enum <%= handlerName %>ErrorCodes {<% errors.forEach(function(error, index) { %>
  <%= error.errorName %> = '<%= error.errorCode %>'<%= index < errors.length - 1 ? ',' : '' %><% }); %>
}

<% function printProperty(prop, level) { 
  var indent = '  '.repeat(level);
  var result = `\n${indent}${prop.name}${!prop.required ? '?' : ''}:`;
  if (prop.type === 'array') {
    result += ' ' + printType(prop.items, level + 1) + '[];';
  } else if (prop.type === 'object') {
    result += ' {';
    prop.properties.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(subProp) {
      result += printProperty(subProp, level + 1);
    });
    result += `\n${indent}};`;
  } else {
    result += ` ${prop.type};`;
  }
  return result;
} %>

<% function printType(type, level) {
  if (Array.isArray(type)) {
    return type.map(t => printType(t, level)).join(' | ');
  } else if (typeof type === 'object') {
    return '{' + type.properties.sort((a, b) => a.name.localeCompare(b.name)).map(prop => printProperty(prop, level)).join('') + '\n' + '  '.repeat(level - 1) + '}';
  }
  return type;
} %>
