import { BaseOutput } from '../../../BaseOutput';

export interface <%= handlerName %>Payload {<% if (payload.properties.length > 0) { payload.properties.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(prop) { %><%= printProperty(prop, 1) %><% }); } %>
}

export interface <%= handlerName %>Output extends BaseOutput {<% if (output.properties.length > 0) { output.properties.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(prop) { %><%= printProperty(prop, 1) %><% }); } %>
}

export enum <%= handlerName %>ErrorCodes {<% errors.forEach(function(error, index) { %>
  <%= error.errorName %> = '<%= error.errorCode %>'<%= index < errors.length - 1 ? ',' : '' %><% }); %>
}

<% function printProperty(prop, level) { 
  var indent = '  '.repeat(level);
  var result = `\n${indent}${prop.name}${!prop.required ? '?' : ''}:`;
  if (prop.type === 'array') {
    result += ' {';
    prop.items.sort((a, b) => a.name.localeCompare(b.name)).forEach(function(item, index, array) {
      result += printProperty(item, level + 1);
    });
    result += `\n${indent}}[];`; 
  } else {
    result += ` ${prop.type};`;
  }
  return result;
} %>