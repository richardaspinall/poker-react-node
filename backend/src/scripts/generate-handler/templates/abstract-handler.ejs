/* 
!!!! Copy out the below for new or updated API

import { ResultError, ResultSuccess } from '@infra/Result';
import { MethodNotImplementedError } from '@shared/api/BaseOutput';
import { <%= handlerName %>Payload, <%= handlerName %>Output } from '@shared/api/gen/<%= domainName %>/types/<%= handlerName %>';

<% errors.forEach(function(error, index) { %>
import { <%= error.errorName %> } from '../errors/gen/<%= error.errorName %>';<% }); %>
import { Abstract<%= handlerName %>Handler } from './gen/Abstract<%= handlerName %>Handler';

export class <%= handlerName %>Handler extends Abstract<%= handlerName %>Handler {
  protected async getResult(payload: <%= handlerName %>Payload) {
    return new ResultError(new MethodNotImplementedError());

    // 1. After generating the handler, create a PR returning the above
    // 2. Then implement the handler when the above PR is merged and use the below
    // return new ResultSuccess<<%= handlerName %>Output>();
  }
}
*/

import {
    <%= handlerName %>OutputSchema,
    <%= handlerName %>PayloadSchema,
} from '@shared/api/gen/<%= domainName %>/schemas/<%= handlerName %>Schemas';
import {
    <%= handlerName %>ErrorCodes,
    <%= handlerName %>Output,
    <%= handlerName %>Payload,
} from '@shared/api/gen/<%= domainName %>/types/<%= handlerName %>';

import { BaseHandler } from '../../../BaseHandler';

export abstract class Abstract<%= handlerName %>Handler extends BaseHandler<<%= handlerName %>Payload, <%= handlerName %>Output> {
  constructor() {
    super(<%= handlerName %>PayloadSchema, <%= handlerName %>OutputSchema, <%= handlerName %>ErrorCodes<%= authRequired ? '' : ', false' %>);
  }
}